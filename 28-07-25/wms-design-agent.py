from docx import Document
from groq import Groq
import json
import re
from docx.shared import Pt

# ---------- STEP 1: Extract Text ----------
def extract_text_from_docx(file_path):
    """Extracts text from a Word document."""
    try:
        doc = Document(file_path)
        text = "\n".join([p.text for p in doc.paragraphs if p.text.strip()])
        return text
    except Exception as e:
        print(f"[ERROR] Could not read DOCX: {e}")
        return ""

# ---------- STEP 2: Analyze Requirements ----------
def analyze_requirements(extracted_text, api_key):
    """Calls Groq model and returns structured recommendations as JSON."""
    client = Groq(api_key=api_key)

    prompt = f"""
    You are a Blue Yonder Dispatcher 2019 WMS expert.
    Analyze the following requirement and return ONLY valid JSON:

    Requirement:
    {extracted_text}

    Respond ONLY in valid JSON. Do not add code fences, comments, or extra text.
    JSON format:
    {{
      "Key_Requirements": [],
      "Affected_Components": {{
        "PLSQL_Packages": [],
        "RDT_Rules": [],
        "DB_Tables": []
      }},
      "Development_Recommendations": {{
        "PLSQL_Changes": "",
        "RDT_Changes": "",
        "Schema_Changes": "",
        "Testing_Strategy": ""
      }}
    }}
    """

    response = client.chat.completions.create(
        model="llama3-70b-8192",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.2,
        max_tokens=1200
    )

    raw_output = response.choices[0].message.content

    # ---- Clean JSON Output ----
    clean_output = re.sub(r"```.*?```", "", raw_output, flags=re.DOTALL).strip()
    match = re.search(r"\{.*\}", clean_output, re.DOTALL)
    if match:
        try:
            return json.loads(match.group(0))
        except json.JSONDecodeError:
            return {"error": "Invalid JSON", "raw_output": raw_output}
    else:
        return {"error": "No JSON found", "raw_output": raw_output}

# ---------- STEP 3: Save Analysis to Word ----------
def save_analysis_to_docx(result, output_path):
    """
    Save AI analysis results to a professional Word document.
    """
    doc = Document()

    # Title
    doc.add_heading("Blue Yonder WMS – Design Agent Analysis", 0)

    # Section 1 – Key Requirements
    doc.add_heading("1. Key Requirements", level=1)
    if "Key_Requirements" in result:
        for req in result["Key_Requirements"]:
            doc.add_paragraph(f"• {req}", style='List Bullet')

    # Section 2 – Affected Components
    doc.add_heading("2. Affected WMS Components", level=1)
    if "Affected_Components" in result:
        table = doc.add_table(rows=1, cols=2)
        table.style = 'Light List Accent 1'
        hdr_cells = table.rows[0].cells
        hdr_cells[0].text = 'Component Type'
        hdr_cells[1].text = 'Items'
        for key, values in result["Affected_Components"].items():
            row = table.add_row().cells
            row[0].text = key
            row[1].text = ", ".join(values)

    # Section 3 – Development Recommendations
    doc.add_heading("3. Detailed Development Recommendations", level=1)
    if "Development_Recommendations" in result:
        for k, v in result["Development_Recommendations"].items():
            doc.add_paragraph(f"{k.replace('_',' ')}:", style='Heading 2')
            p = doc.add_paragraph(v)
            p.style.font.size = Pt(11)

    # Footer
    doc.add_paragraph("\nGenerated by AI Design Agent", style='Intense Quote')

    # Save file
    doc.save(output_path)
    print(f"[INFO] Report saved to: {output_path}")

# ---------- STEP 4: Main ----------
if __name__ == "__main__":
    file_path = "/Users/balaajiganesh/Library/Mobile Documents/com~apple~CloudDocs/WMS-AI-DESIGN-AGENT/28-07-25/sample_requirement.docx"
    api_key = "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"

    extracted_text = extract_text_from_docx(file_path)
    if not extracted_text:
        print("[ERROR] No text extracted.")
    else:
        result = analyze_requirements(extracted_text, api_key)
        print(json.dumps(result, indent=2))

        # Save to Word
        output_doc = "/Users/balaajiganesh/Library/Mobile Documents/com~apple~CloudDocs/WMS-AI-DESIGN-AGENT/28-07-25/design_analysis.docx"
        save_analysis_to_docx(result, output_doc)
