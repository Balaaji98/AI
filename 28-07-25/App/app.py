import os
import re
import json
import tempfile
from flask import Flask, request, render_template, send_file
from groq import Groq
from docx import Document
from docx.shared import Pt

app = Flask(__name__)
GROQ_API_KEY = "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"  # <-- Replace with your real key

# ---- Step 1: Extract text from DOCX ----
def extract_text_from_docx(file_path):
    try:
        doc = Document(file_path)
        return "\n".join([p.text for p in doc.paragraphs if p.text.strip()])
    except Exception as e:
        print(f"[ERROR] Could not read DOCX: {e}")
        return ""

# ---- Step 2: Call Groq Model ----
def analyze_requirements(text):
    client = Groq(api_key=GROQ_API_KEY)

    prompt = f"""
    You are a Blue Yonder Dispatcher 2019 WMS expert.
    Analyze the following requirement. Respond ONLY with valid JSON. 
    Do not include any text, explanation, or markdown. 

    Requirement:
    {text}

    Required JSON format:
    {{
      "Key_Requirements": [],
      "Affected_Components": {{
        "PLSQL_Packages": [],
        "RDT_Rules": [],
        "DB_Tables": []
      }},
      "Development_Recommendations": {{
        "PLSQL_Changes": "",
        "RDT_Changes": "",
        "Schema_Changes": "",
        "Testing_Strategy": ""
      }}
    }}
    """

    response = client.chat.completions.create(
        model="llama3-70b-8192",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.2,
        max_tokens=1200
    )

    raw_output = response.choices[0].message.content
    print("=== RAW MODEL OUTPUT ===")
    print(raw_output)

    # ---- Clean Output ----
    clean_output = re.sub(r"```.*?```", "", raw_output, flags=re.DOTALL).strip()
    match = re.search(r"\{.*\}", clean_output, re.DOTALL)
    if match:
        try:
            return json.loads(match.group(0))
        except json.JSONDecodeError as e:
            print("[DEBUG] JSON Decode Error:", e)
            return {"error": "Invalid JSON", "raw_output": raw_output}
    else:
        return {"error": "No JSON block found", "raw_output": raw_output}

# ---- Step 3: Save to Word ----
def save_report(result):
    doc = Document()
    doc.add_heading("Blue Yonder WMS – Design Agent Analysis", 0)

    # Key Requirements
    doc.add_heading("1. Key Requirements", level=1)
    for r in result.get("Key_Requirements", []):
        doc.add_paragraph(f"• {r}", style='List Bullet')

    # Affected Components
    doc.add_heading("2. Affected Components", level=1)
    table = doc.add_table(rows=1, cols=2)
    table.style = 'Light List Accent 1'
    table.rows[0].cells[0].text = "Component Type"
    table.rows[0].cells[1].text = "Items"
    for k, v in result.get("Affected_Components", {}).items():
        row = table.add_row().cells
        row[0].text = k
        row[1].text = ", ".join(v)

    # Development Recommendations
    doc.add_heading("3. Development Recommendations", level=1)
    for k, v in result.get("Development_Recommendations", {}).items():
        doc.add_paragraph(f"{k.replace('_',' ')}:", style='Heading 2')
        p = doc.add_paragraph(v)
        p.style.font.size = Pt(11)

    doc.add_paragraph("\nGenerated by AI Design Agent", style='Intense Quote')

    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".docx")
    doc.save(tmp.name)
    return tmp.name

# ---- Step 4: Flask Routes ----
@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        if "file" not in request.files:
            return "No file uploaded", 400
        file = request.files["file"]
        if file.filename == "":
            return "No file selected", 400

        filepath = os.path.join(tempfile.gettempdir(), file.filename)
        file.save(filepath)

        text = extract_text_from_docx(filepath)
        result = analyze_requirements(text)

        if not result or "error" in result:
            return f"Model returned invalid response:<br><pre>{result.get('raw_output', '')}</pre>", 500

        report_path = save_report(result)
        return send_file(report_path, as_attachment=True, download_name="WMS_Analysis.docx")

    return render_template("index.html")

if __name__ == "__main__":
    app.run(debug=True)
